language: go

go: 1.4

install: go build -o sample

script: go test ./...

before_deploy:
  - PLATFORMS=(darwin/386 darwin/amd64 freebsd/386 freebsd/amd64 freebsd/arm linux/386 linux/amd64 linux/arm windows/386 windows/amd64)

 # compile all go os/archs
  - |
    current_dir=$(pwd)
    cd $(go env GOROOT)/src
    for PLATFORM in "${PLATFORMS[@]}"; do
      if ! GOOS=${PLATFORM%/*} GOARCH=${PLATFORM#*/} ./make.bash --no-clean 2>&1; then
        echo "Failed installed go stdlib for $PLATFORM" && exit 1
      fi
    done
    cd $current_dir

 # build binary for all archs
  - |
    for PLATFORM in "${PLATFORMS[@]}"; do
      echo "Building $PLATFORM"
      GOOS=${PLATFORM%/*}
      GOARCH=${PLATFORM#*/}
      if [ "$GOOS" = "windows" ]; then
        build_cmd="GOOS=$GOOS GOARCH=$GOARCH go build -o sample -ldflags '-w -s'"
      else
        build_cmd="CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -o sample -ldflags '-d -w -s'"
      fi
      if ! eval $build_cmd; then
        echo "Failed building sample for $PLATFORM" && return 1
      fi
      if ! zip -9 sample-${GOOS}-${GOARCH}.zip sample; then
        echo "Failed to zip sample for $PLATFORM" && return 1
      fi
      echo "sample-${GOOS}-${GOARCH}.zip"
    done

  - ls

deploy:
  provider: releases
  api_key: $AUTH_TOKEN
  file:
    - "sample-darwin-386.zip"
    - "sample-darwin-amd64.zip"

    - "sample-freebsd-386.zip"
    - "sample-freebsd-arm.zip"
    - "sample-freebsd-amd64.zip"

    - "sample-linux-386.zip"
    - "sample-linux-arm.zip"
    - "sample-linux-amd64.zip"

    - "sample-windows-386.zip"
    - "sample-windows-amd64.zip"

  skip_cleanup: true
  on:
    tags: true